<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="C:\Users\15292\.nuget\packages\mysql.data\8.0.18\lib\net452\MySql.Data.dll" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#@ include file="$(ProjectDir)MysqlDBHelper.ttinclude"  #>

<#@ include file="$(ProjectDir)ModelAuto.ttinclude"	#>

<# 
    var solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)"); 
    var OutputPath1 = solutionsPath+"\\CoreT.Services";
	if (!Directory.Exists(OutputPath1))
	{
	    Directory.CreateDirectory(OutputPath1);
	}
	#> 
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = OutputPath1 }; #>

//--------------------------------------------------------------------
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> 
//     对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
//--------------------------------------------------------------------
<# 
	var tableName=config.TableName;
 #>
<# 
if(tableName!=""){
    #>  

using System;
using CoreT.IServices;
using CoreT.IRepository;
using CoreT.Entity;
namespace CoreT.Services
{	
	/// <summary>
	/// <#=tableName#>Services
	/// </summary>	
	public class <#=tableName#>Services : BaseServices<<#=tableName#>>, I<#=tableName#>Services
    {
	
        I<#=tableName#>Repository dal;
        public <#=tableName#>Services(I<#=tableName#>Repository dal)
        {
            this.dal = dal;
            base.baseDal = dal;
        }
    }
}

<# 
    } else{ 
	#>
<# 
     List<DbTable> tableList=DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase);
 #>

<# 
     foreach(var table in tableList) 
    {  
		manager.StartBlock(table.TableName+"Services"+".cs");
	 #>
	//----------<#=table.TableName #>开始----------
    

using System;
using CoreT.IServices;
using CoreT.IRepository;
using CoreT.Entity;

namespace CoreT.Services
{	
	/// <summary>
	/// <#=table.TableName#>Services
	/// </summary>	
	public class <#=table.TableName#>Services : BaseServices<<#=table.TableName#>>, I<#=table.TableName #>Services
    {
        I<#=table.TableName #>Repository dal;
        public <#=table.TableName #>Services(I<#=table.TableName#>Repository dal)
        {
            this.dal = dal;
            base.BaseDal = dal;
        }
    }
}

	//----------<#=table.TableName#>结束----------
	<# 
		manager.EndBlock(); 
		} 
		
		manager.Process(true);
	}
	#> 

