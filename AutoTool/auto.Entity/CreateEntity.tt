//如果要获取主机信息，记得把 hostspecific 设置成true
<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ output extension=".cs" #>

//导入命名空间组件
<#@ assembly name="System.Data" #>
<#@ assembly name="C:\Users\15292\.nuget\packages\mysql.data\8.0.18\lib\net452\MySql.Data.dll" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

//引入我们的公共模板文件
<#@ include file="$(ProjectDir)MysqlDBHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)ModelAuto.ttinclude"	#>

//定义我们的输出文件夹
<# 
    var solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)"); 
    var OutputPath1 = solutionsPath+"\\CoreT.Entity\\Models";
	if (!Directory.Exists(OutputPath1))
	{
	    Directory.CreateDirectory(OutputPath1);
	}
	 var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = OutputPath1 }; 
#>

//--------------------------------------------------------------------
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> 
//     对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
//--------------------------------------------------------------------
<# 
	var tableName=config.TableName;//获取config配置中的表名，为单一生产使用
 #>
<# 
if(tableName!=""){//如果表名有值，表示是生成单一文件
    #>  
using System;
namespace CoreT.Entity
{	
	/// <summary>
	/// <#=tableName#>
	/// </summary>	
	public class <#=tableName#>//可以在这里加上基类等
	{
	//将全部字段遍历出来
<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
	  public <#= column.CSharpType#><# if(column.CommonType.IsValueType && column.IsNullable.Equals("1")){#>?<#}#> <#=column.ColumnName#> { get; set; }
<#}#> 
    }
}
//如果为空，表示要将整个数据库都生成出来
<# 
    } else{ 

	#>
	//连接数据库，打开 connect 连接
<# 
    List<DbTable> tableList=DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase);
 #>
 //遍历全部数据库表
<# 
    foreach(var table in tableList) 
    {  #>   

	//开始启动block块，参数是实体类文件名
    <# 
		manager.StartBlock(table.TableName+".cs");
	 #>
	//----------<#=table.TableName#>开始----------

using SqlSugar;    
using System;
namespace CoreT.Entity
{	
	/// <summary>
	/// <#=table.TableName#>
	/// </summary>	
	public class <#=table.TableName#>//可以在这里加上基类等
	{
	//将该表下的字段都遍历出来，可以自定义获取数据描述等信息
    <# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, table.TableName )){ #>
	    <# 
       if(column.IsPrimaryKey.Equals("1")&&column.IsIdentity.Equals("1")){//如果表名有值，表示是生成单一文件
        #> 
	   [SugarColumn(IsPrimaryKey = true, IsIdentity = true)] //是主键, 还是标识列 
	   <# 
	   }else if(column.IsPrimaryKey.Equals("1")){
	   #> 
	   [SugarColumn(IsPrimaryKey = true)] //是主键
	   <# 
	   }else if(column.IsIdentity.Equals("1")){
	   #> 
	   [SugarColumn(IsIdentity = true)] //是标识列 
	   <# } #> 
	  public <#= column.CSharpType#> <# if(column.CommonType.IsValueType && column.IsNullable.Equals("1")){#> ?<#}#> <#=column.ColumnName #> { get; set; }
<#}#> 
}
}
	//----------<#=table.TableName#>结束----------
	<# 
		manager.EndBlock(); 
		} 
		manager.Process(true);
	}
	#> 

